const User = require("../models/User");
const { google } = require("googleapis");
const { googleClientId, googleClientSecret, googleRedirectUri } = require("../config/config");

const findUserById = async (userId) => {
    try {
        return await User.findById(userId);
    } catch (error) {
        console.error("‚ùå Error fetching user:", error);
        return null;
    }
};

const storeUserTokensInSession = (req, user) => {
    req.session.tokens = user.tokens;
    console.log("‚úÖ Session updated:", req.session);
};

async function getValidAccessToken(user) {
    if (!user.tokens.refresh_token) {
        throw new Error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π refresh_token! –í–∏–¥–∞–ª—ñ—Ç—å —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—É.");
    }

    if (user.tokens.expiry_date < Date.now()) {
        console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è access_token...");

        const oauth2Client = new google.auth.OAuth2(googleClientId, googleClientSecret, googleRedirectUri);
        oauth2Client.setCredentials({ refresh_token: user.tokens.refresh_token });

        try {
            const { credentials } = await oauth2Client.refreshAccessToken();

            await User.findByIdAndUpdate(user._id, {
                tokens: {
                    access_token: credentials.access_token,
                    refresh_token: user.tokens.refresh_token,
                    expiry_date: Date.now() + 3600 * 1000
                }
            });

            console.log("‚úÖ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ!");
            return credentials.access_token;
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:", error.response ? error.response.data : error.message);

            if (error.response?.data?.error === "invalid_grant") {
                console.error("‚ö†Ô∏è `invalid_grant` ‚Äì –¢–æ–∫–µ–Ω –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ! –í–∏–¥–∞–ª—è—é —Ç–æ–∫–µ–Ω–∏...");
                await User.findByIdAndUpdate(user._id, { $unset: { tokens: "" } });
                throw new Error("–¢–æ–∫–µ–Ω –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞.");
            }

            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ `access_token`.");
        }
    }

    return user.tokens.access_token;
};

module.exports = {
    findUserById,
    storeUserTokensInSession,
    getValidAccessToken
};
