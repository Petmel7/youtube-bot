
const { google } = require("googleapis");
require("dotenv").config();
const User = require("../models/User");
const { generateResponse } = require("./geminiService");
const { googleClientId, googleClientSecret, googleRedirectUri } = require("../config/config");

async function getValidAccessToken(user) {
    if (!user.tokens.refresh_token) {
        throw new Error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π refresh_token! –í–∏–¥–∞–ª—ñ—Ç—å —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—É.");
    }

    if (user.tokens.expiry_date < Date.now()) {
        console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è access_token...");

        const oauth2Client = new google.auth.OAuth2(googleClientId, googleClientSecret, googleRedirectUri);
        oauth2Client.setCredentials({ refresh_token: user.tokens.refresh_token });

        try {
            const { credentials } = await oauth2Client.refreshAccessToken();

            await User.findByIdAndUpdate(user._id, {
                tokens: {
                    access_token: credentials.access_token,
                    refresh_token: user.tokens.refresh_token,
                    expiry_date: Date.now() + 3600 * 1000
                }
            });

            console.log("‚úÖ –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ!");
            return credentials.access_token;
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:", error.response ? error.response.data : error.message);

            if (error.response?.data?.error === "invalid_grant") {
                console.error("‚ö†Ô∏è `invalid_grant` ‚Äì –¢–æ–∫–µ–Ω –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ! –í–∏–¥–∞–ª—è—é —Ç–æ–∫–µ–Ω–∏...");
                await User.findByIdAndUpdate(user._id, { $unset: { tokens: "" } });
                throw new Error("–¢–æ–∫–µ–Ω –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞.");
            }

            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ `access_token`.");
        }
    }

    return user.tokens.access_token;
}

async function startBot(user, videoId, userPrompt) {
    console.log(`ü§ñ Bot started on video: ${videoId}`);
    console.log(`‚úÖ userPrompt: ${userPrompt}`);

    const accessToken = await getValidAccessToken(user);
    console.log("üîç –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–æ–∫–µ–Ω:", accessToken);

    const authClient = new google.auth.OAuth2(googleClientId, googleClientSecret, googleRedirectUri);
    authClient.setCredentials({ access_token: accessToken });
    const youtube = google.youtube({ version: "v3", auth: authClient });

    let nextPageToken = null;
    let totalReplies = 0;

    try {
        do {
            const response = await youtube.commentThreads.list({
                part: "snippet",
                videoId,
                maxResults: 100,
                pageToken: nextPageToken
            });

            for (const item of response.data.items) {
                const commentId = item.snippet.topLevelComment.id;
                const commentText = item.snippet.topLevelComment.snippet.textOriginal;
                console.log(`üí¨ Found comment: ${commentText}`);

                const responseText = await generateResponse(commentText, userPrompt);
                await replyToComment(accessToken, commentId, responseText);
                totalReplies++;
            }

            nextPageToken = response.data.nextPageToken || null;
        } while (nextPageToken);

        console.log(`‚úÖ Bot finished replying to ${totalReplies} comments.`);
        return totalReplies; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

    } catch (error) {
        console.error("‚ùå Error in bot:", error.response ? error.response.data : error.message);
        throw error;
    }
}

async function replyToComment(accessToken, commentId, responseText) {
    const authClient = new google.auth.OAuth2(googleClientId, googleClientSecret, googleRedirectUri);
    authClient.setCredentials({ access_token: accessToken });
    const youtube = google.youtube({ version: "v3", auth: authClient });

    try {
        await youtube.comments.insert({
            part: "snippet",
            resource: {
                snippet: {
                    parentId: commentId,
                    textOriginal: responseText
                }
            }
        });
        console.log(`‚úÖ Replied: ${responseText}`);
    } catch (error) {
        console.error("‚ùå Error replying to comment:", error.response ? error.response.data : error.message);
    }
}

module.exports = { startBot, replyToComment };
